<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thejazeto Lhousa</title><link>/</link><description>Recent content on Thejazeto Lhousa</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>©thejazeto</copyright><lastBuildDate>Sat, 25 Sep 2021 21:36:45 +0530</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Product Review: AirPod Pro vs Nothing ear(1)</title><link>/posts/product-review-earpods/</link><pubDate>Sat, 25 Sep 2021 21:36:45 +0530</pubDate><guid>/posts/product-review-earpods/</guid><description>I&amp;rsquo;ve owned the AirPod Pros for a little over a year and the Nothing ear(1) for about 2 weeks as of this writing. Below I share some personal experiences and opinions which may help in deciding if caught in a dillema between the two amazing products.
Active Noise Cancellation (ANC) This is a close one at least in my ears. They both keep out noise pretty well. For any normal human out there, you will not be able to pick any difference.</description></item><item><title>My Dotfile Favorites</title><link>/posts/my-dotfile-favorites/</link><pubDate>Sat, 25 Sep 2021 15:58:55 +0530</pubDate><guid>/posts/my-dotfile-favorites/</guid><description>Dotfiles are used to customize your system. The “dotfiles” name is derived from the configuration files in Unix-like systems that start with a dot (e.g. .bash_profile and .gitconfig). In this post I will share some of my most used configurations for some common dotfiles.
.zshrc greph () { fc -ln 0 | grep --color=auto $1 | awk &amp;#39;!seen[$0]++&amp;#39; | sed -e &amp;#39;s/^/&amp;gt;&amp;gt; /&amp;#39; } I love this one. Probably my favorite in this dotfile.</description></item><item><title>TIL 2</title><link>/posts/til-2/</link><pubDate>Sat, 25 Sep 2021 12:17:43 +0530</pubDate><guid>/posts/til-2/</guid><description>jq command A command to manipulate json files. At work we usually have a bunch json serialized ouputs in S3 or some other datastore, which are absurdly many lines long and deeply nested. Often, if I need to grep something out of it, I&amp;rsquo;ll just copy and paste it to a company internal json prettifier to make it human readable and get what I need. There must be some out on the web too.</description></item><item><title>Weekend Read 1</title><link>/posts/weekend-read-1/</link><pubDate>Sat, 25 Sep 2021 01:48:04 +0530</pubDate><guid>/posts/weekend-read-1/</guid><description>Articles Thread pools in JVM CPU bound, Blocking and Non-blocking CPU bound should have threads at max equal to no of CPU Blocking IO operations should never be allowed on the CPU bound pool They need to go to separate pool Async IO polls (non blocking) should be handled by very small number of fixed, pre-allocated threads These just sit idle asking kernel continually if any new async IO notification is available then forward to rest of application Never do any work on this thread pool.</description></item><item><title>Favorite Finance Apps</title><link>/posts/favorite-finance-apps/</link><pubDate>Tue, 21 Sep 2021 05:27:54 +0530</pubDate><guid>/posts/favorite-finance-apps/</guid><description>Bank apps The banks own apps to manage accounts. For the purposes of checking statements. Basic banking. CRED For tracking my credit cards and their due dates so that I don&amp;rsquo;t miss anything. It also gives a very nice visual of the statements for the billing cycles. The raw PDFs generated by banks are too unorganized and hard to read. INDmoney Tracking all my assets and liabilities.</description></item><item><title>TIL 1</title><link>/posts/til-1/</link><pubDate>Mon, 20 Sep 2021 12:32:57 +0530</pubDate><guid>/posts/til-1/</guid><description>Today I Learned a.k.a TIL
FactoryBean An amazing way to instantiate your beans based on different situations or conditions.
Example use case: I want a specific implementation of an interface based on some launch date. I can define that in the factory.
public class MessageFactoryBean implements FactoryBean&amp;lt;MessageInterface&amp;gt; { private MessageInterface postcard; private MessageInterface letter; public MessageInterface getObject() { if (your condition here) { return letter; } return postcard; } // other methods omitted } Where MessageInterface is implemented by PostCard and FormalLetter.</description></item><item><title>Things I wish I learnt before getting a job</title><link>/posts/things-i-wish-i-learnt-before-job/</link><pubDate>Sun, 19 Sep 2021 14:36:20 +0530</pubDate><guid>/posts/things-i-wish-i-learnt-before-job/</guid><description>Disclaimer: there is only so much you can prepare in advance. You’ll mostly learn everything on the job itself but I think there are some learnings which can take off the load. Instead of trying to play catch up while on the job.
Most of the big tech companies have in-house tooling which is a beast in itself to learn (depending on the company and how much internal tools they own).</description></item><item><title>About</title><link>/about/</link><pubDate>Sun, 19 Sep 2021 14:29:10 +0530</pubDate><guid>/about/</guid><description>Who am I? I am a software engineer from Nagaland, India. Currently working in Bengaluru with Amazon.
Why am I doing this? It has been a long time coming. This blog. After 6-7yrs of lying in my todo list. I am not a voracious reader or learner in the traditional sense but I do read and watch a lot of stuff on the internet. Sometimes, on stuff which are not the best use of my time in hindsight.</description></item><item><title>First</title><link>/posts/first/</link><pubDate>Sun, 19 Sep 2021 14:10:19 +0530</pubDate><guid>/posts/first/</guid><description>Hello world</description></item></channel></rss>