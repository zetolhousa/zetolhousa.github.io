<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Til on Thejazeto Lhousa</title><link>/tags/til/</link><description>Recent content in Til on Thejazeto Lhousa</description><generator>Hugo</generator><language>en-us</language><copyright>Â©thejazeto</copyright><lastBuildDate>Sat, 25 Sep 2021 12:17:43 +0530</lastBuildDate><atom:link href="/tags/til/index.xml" rel="self" type="application/rss+xml"/><item><title>TIL 2</title><link>/posts/til-2/</link><pubDate>Sat, 25 Sep 2021 12:17:43 +0530</pubDate><guid>/posts/til-2/</guid><description>&lt;h2 id="jq-command">&lt;code>jq&lt;/code> command&lt;/h2>
&lt;p>A command to manipulate json files. At work we usually have a bunch json serialized ouputs in S3 or some other datastore, which are absurdly many lines long and deeply nested. Often, if I need to grep something out of it, I&amp;rsquo;ll just copy and paste it to a company internal json prettifier to make it human readable and get what I need. There must be some out on the web too. Something like &lt;a href="https://codebeautify.org/jsonviewer">this&lt;/a>.&lt;/p></description></item><item><title>TIL 1</title><link>/posts/til-1/</link><pubDate>Mon, 20 Sep 2021 12:32:57 +0530</pubDate><guid>/posts/til-1/</guid><description>&lt;p>&lt;em>Today I Learned a.k.a TIL&lt;/em>&lt;/p>
&lt;h2 id="factorybean">FactoryBean&lt;/h2>
&lt;p>An amazing way to instantiate your beans based on different situations or conditions.&lt;/p>
&lt;p>Example use case: I want a specific implementation of an interface based on some launch date. I can define that in the factory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MessageFactoryBean&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> FactoryBean&lt;span style="color:#f92672">&amp;lt;&lt;/span>MessageInterface&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> MessageInterface postcard;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> MessageInterface letter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> MessageInterface &lt;span style="color:#a6e22e">getObject&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (your condition here) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> letter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> postcard;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// other methods omitted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where &lt;code>MessageInterface&lt;/code> is implemented by &lt;code>PostCard&lt;/code> and &lt;code>FormalLetter&lt;/code>.&lt;/p></description></item></channel></rss>