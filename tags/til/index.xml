<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Til on Thejazeto Lhousa</title><link>/tags/til/</link><description>Recent content in Til on Thejazeto Lhousa</description><generator>Hugo</generator><language>en-us</language><copyright>Â©thejazeto</copyright><lastBuildDate>Sat, 25 Sep 2021 12:17:43 +0530</lastBuildDate><atom:link href="/tags/til/index.xml" rel="self" type="application/rss+xml"/><item><title>TIL 2</title><link>/posts/til-2/</link><pubDate>Sat, 25 Sep 2021 12:17:43 +0530</pubDate><guid>/posts/til-2/</guid><description>jq command A command to manipulate json files. At work we usually have a bunch json serialized ouputs in S3 or some other datastore, which are absurdly many lines long and deeply nested. Often, if I need to grep something out of it, I&amp;rsquo;ll just copy and paste it to a company internal json prettifier to make it human readable and get what I need. There must be some out on the web too.</description></item><item><title>TIL 1</title><link>/posts/til-1/</link><pubDate>Mon, 20 Sep 2021 12:32:57 +0530</pubDate><guid>/posts/til-1/</guid><description>Today I Learned a.k.a TIL
FactoryBean An amazing way to instantiate your beans based on different situations or conditions.
Example use case: I want a specific implementation of an interface based on some launch date. I can define that in the factory.
public class MessageFactoryBean implements FactoryBean&amp;lt;MessageInterface&amp;gt; { private MessageInterface postcard; private MessageInterface letter; public MessageInterface getObject() { if (your condition here) { return letter; } return postcard; } // other methods omitted } Where MessageInterface is implemented by PostCard and FormalLetter.</description></item></channel></rss>